kube-prometheus-stack:
  nodeExporter:
    enabled: false
  kubelet:
    enabled: false
  coreDns:
    enabled: false
  kubeControllerManager:
    enabled: false
  kubeEtcd:
    enabled: false
  kubeScheduler:
    enabled: false
  kubeProxy:
    enabled: false
  kubeStateMetrics:
    enabled: false
  grafana:
    replicas: 2
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
      limits:
        cpu: 200m
        memory: 200Mi
    podDisruptionBudget:
      minAvailable: 1
    defaultDashboardsEnabled: false
    sidecar:
      dashboards:
        enabled: false
      datasources:
        enabled: false
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
          - name: prometheus
            type: prometheus
            url: http://grafana-stack-kube-prometh-prometheus:9090
            access: proxy
          - name: loki
            type: loki
            url: http://grafana-stack-loki-gateway.grafana-stack:80
            access: proxy
          - name: alertmanager
            type: alertmanager
            url: http://grafana-stack-kube-prometh-alertmanager:9093
            access: proxy
    # dashboardProviders:
    #   dashboardproviders.yaml:
    #     apiVersion: 1
    #     providers:
    #       - name: "grafana-dashboards-kubernetes"
    #         orgId: 1
    #         folder: "Kubernetes"
    #         type: file
    #         disableDeletion: true
    #         editable: true
    #         options:
    #           path: /var/lib/grafana/dashboards/grafana-dashboards-kubernetes
    # dashboards:
    #   grafana-dashboards-kubernetes:
    #     k8s-views-global:
    #       url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-global.json
    #       token: ""
    #     k8s-views-namespaces:
    #       url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-namespaces.json
    #       token: ""
    #     k8s-views-nodes:
    #       url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-nodes.json
    #       token: ""
    #     k8s-views-pods:
    #       url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-pods.json
    #       token: ""
    envFromSecret: kube-prometheus-stack-grafana-oauth
    adminPassword: pM27!PLMl66K
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        nginx.org/websocket-services: "grafana-stack"
      hosts:
        - grafana.monitor.itemoptix.com
      tls:
        - hosts:
            - grafana.monitor.itemoptix.com
    grafana.ini:
      paths:
        data: /var/lib/grafana/
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
      analytics:
        reporting_enabled: false
        check_for_updates: false
      grafana_net:
        url: https://grafana.net
      server:
        domain: "grafana.monitor.itemoptix.com"
        root_url: "https://grafana.monitor.itemoptix.com"
      auth.azuread:
        name: Azure AD
        enabled: true
        allow_sign_up: true
        auto_login: true
        client_id: $__env{GF_AUTH_AZUREAD_CLIENT_ID}
        client_secret: $__env{GF_AUTH_AZUREAD_CLIENT_SECRET}
        scopes: openid email profile
        auth_url: <>
        token_url: <>
        allowed_domains: checkpt.com
        allowed_groups: <>
        allowed_organizations: <>
        role_attribute_strict: false
        allow_assign_grafana_admin: true
        skip_org_role_sync: false
        use_pkce: true
      users:
        viewers_can_edit: true
      database:
        type: mysql
        host: mariadb
        user: grafana
        password: $__env{GF_DATABASE_PASSWORD}
        ssl_mode: false
  alertmanager:
    alertmanagerSpec:
      retention: 168h
      replicas: 2
      storage:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 16Gi
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
        limits:
          cpu: 200m
          memory: 200Mi
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        nginx.org/server-snippets: |
          allow 49.2d06.24sd1.58;
  
          deny all;
      hosts:
        - <>
      tls:
        - hosts:
            <>
    serviceMonitor:
      enableHttp2: false
  prometheus:
    prometheusSpec:
      enableRemoteWriteReceiver: true
      retention: 720h
      replicas: 2
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
        limits:
          cpu: 200m
          memory: 400Mi
      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 16Gi
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        nginx.org/server-snippets: |
          allow 49.2fsd06.2ss41.58;
    
          deny all;
      hosts:
        - ""
      tls:
        - hosts:
            - ""
  prometheusOperator:
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
      limits:
        cpu: 200m
        memory: 200Mi
    tls:
      enabled: false
    admissionWebhooks:
      enabled: false
loki:
  lokiCanary:
    enabled: false
  test:
    enabled: false
  loki:
    schemaConfig:
      configs:
        - from: 2024-04-01
          store: tsdb
          object_store: azure
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    rulerConfig:
      wal:
        dir: /tmp/ruler-wal
      storage:
        type: local
        local:
          directory: /etc/loki/rulestorage
      rule_path: /tmp/rules
      remote_write:
        enabled: true
        client:
          url: http://grafana-stack-kube-prometh-prometheus:9090/api/v1/write
      alertmanager_url: http://grafana-stack-kube-prometh-alertmanager:9093
      enable_api: true
      ring:
        kvstore:
          store: inmemory
      enable_alertmanager_v2: true
    ingester:
      chunk_encoding: snappy
    auth_enabled: false
    storage:
      type: azure
      azure:
        accountName: grafanackpstg
        accountKey: ""
      bucketNames:
        chunks: "chunks"
        ruler: "ruler"
        admin: "admin"
  write:
    replicas: 3
    resources:
      requests:
        cpu: 300m
        memory: 400Mi
      limits:
        cpu: 600m
        memory: 800Mi
    persistence:
      size: 16Gi
  read:
    replicas: 3
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 200m
        memory: 400Mi
  backend:
    replicas: 3
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 200m
        memory: 400Mi
    persistence:
      size: 16Gi
    extraVolumes:
      - name: loki-recording-rules
        configMap:
          name: loki-recording-rules
          defaultMode: 0777
    extraVolumeMounts:
      - name: loki-recording-rules
        mountPath: /etc/loki/rulestorage/fake
  resultsCache:
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
      limits:
        cpu: 200m
        memory: 200Mi
  chunksCache:
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 200m
        memory: 400Mi
  gateway:
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
      limits:
        cpu: 200m
        memory: 200Mi
  tableManager:
    retention_deletes_enabled: true
    retention_period: 168h
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.org/server-snippets: |
        allow 49.dsf206.sfd241.58;
        deny all;
    hosts:
      - ""
    tls:
      - hosts:
          - ""
